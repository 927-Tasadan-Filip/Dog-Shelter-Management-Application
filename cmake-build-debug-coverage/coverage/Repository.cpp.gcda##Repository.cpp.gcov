        -:    0:Source:/mnt/c/Users/Filip/Documents/GitHub/a67-917-Tasadan-Filip/Repository/Repository.cpp
        -:    0:Graph:/mnt/c/Users/Filip/Documents/GitHub/a67-917-Tasadan-Filip/cmake-build-debug-coverage/CMakeFiles/a67_917_Tasadan_Filip.dir/Repository/Repository.cpp.gcno
        -:    0:Data:/mnt/c/Users/Filip/Documents/GitHub/a67-917-Tasadan-Filip/cmake-build-debug-coverage/CMakeFiles/a67_917_Tasadan_Filip.dir/Repository/Repository.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Filip on 18-Mar-21.
        -:    3://
        -:    4:
        -:    5:#include "Repository.h"
        -:    6:#include <iostream>
        -:    7:#include <string>
        -:    8:
        5:    9:Repository::Repository() {
        5:    9-block  0
    $$$$$:    9-block  1
    $$$$$:    9-block  2
        5:   10:    this->file_name = "";
        5:   11:}
        5:   11-block  0
        -:   12:
        -:   13:
       18:   14:void Repository::addDog(const Dog& new_dog) {
       18:   15:    this->readRecordsFromFile();
       18:   15-block  0
       87:   16:    for(auto & i : this->record)
       87:   16-block  0
       70:   16-block  1
       69:   16-block  2
       70:   17:        if(i == new_dog)
       70:   17-block  0
        1:   18:            throw RepoException("There is another dog with the given name!");
        1:   18-block  0
        1:   18-block  1
        1:   18-block  2
    $$$$$:   18-block  3
    $$$$$:   18-block  4
    $$$$$:   18-block  5
    $$$$$:   18-block  6
    $$$$$:   18-block  7
       17:   19:    this->record.push_back(new_dog);
       17:   19-block  0
       17:   20:    this->writeRecordsToFile();
       17:   21:}
        -:   22:
        4:   23:void Repository::updateDog(Dog given_dog, char mode) {
        4:   24:    this->readRecordsFromFile();
        4:   24-block  0
       10:   25:    for(auto & i : this->record)
       10:   25-block  0
        8:   25-block  1
        6:   25-block  2
        8:   26:        if(i == given_dog) {
        8:   26-block  0
        2:   27:            if(mode == 'a') {
        2:   27-block  0
        1:   28:                given_dog.setBreed(i.getBreed());
        1:   28-block  0
        1:   28-block  1
        1:   28-block  2
    $$$$$:   28-block  3
    $$$$$:   28-block  4
        1:   29:                given_dog.setPhotograph(i.getPhotograph());
        1:   29-block  0
        1:   29-block  1
    $$$$$:   29-block  2
    $$$$$:   29-block  3
        1:   30:                i = given_dog;
        -:   31:            }
        2:   32:            if(mode == 'p') {
        2:   32-block  0
        1:   33:                given_dog.setBreed(i.getBreed());
        1:   33-block  0
        1:   33-block  1
        1:   33-block  2
    $$$$$:   33-block  3
    $$$$$:   33-block  4
        1:   34:                given_dog.setAge(i.getAge());
        1:   34-block  0
        1:   35:                i = given_dog;
        1:   35-block  0
        -:   36:            }
        2:   37:            this->writeRecordsToFile();
        2:   37-block  0
        2:   38:            return;
        2:   38-block  0
        2:   38-block  1
        -:   39:        }
        2:   40:    throw RepoException("There is no dog with the given name!");
        2:   40-block  0
        2:   40-block  1
        2:   40-block  2
    $$$$$:   40-block  3
    $$$$$:   40-block  4
    $$$$$:   40-block  5
    $$$$$:   40-block  6
    $$$$$:   40-block  7
        -:   41:}
        2:   42:void Repository::deleteDog(const Dog& given_dog) {
        2:   43:    this->readRecordsFromFile();
        2:   43-block  0
        5:   44:    for(int i=0; i< this->record.size(); i++)
        5:   44-block  0
        3:   44-block  1
        4:   45:        if(this->record[i] == given_dog) {
        4:   45-block  0
        1:   46:            this->record.erase(this->record.begin() + i);
        1:   46-block  0
    $$$$$:   46-block  1
    $$$$$:   46-block  2
    $$$$$:   46-block  3
        1:   47:            this->writeRecordsToFile();
        1:   47-block  0
        1:   48:            return;
        1:   48-block  0
        -:   49:        }
        1:   50:    throw RepoException("There is no dog with the given name!");
        1:   50-block  0
        1:   50-block  1
        1:   50-block  2
    $$$$$:   50-block  3
    $$$$$:   50-block  4
    $$$$$:   50-block  5
    $$$$$:   50-block  6
    $$$$$:   50-block  7
        -:   51:
        -:   52:}
        -:   53:
        8:   54:std::vector<Dog> Repository::getRecord() {
        8:   55:    this->readRecordsFromFile();
        8:   55-block  0
        8:   56:    return this->record;
        -:   57:}
        -:   58:
        2:   59:void Repository::setFileName(std::string file_name) {
        2:   60:    this->file_name = file_name;
        2:   60-block  0
        2:   61:    this->readRecordsFromFile();
        2:   62:}
        -:   63:
       34:   64:void Repository::readRecordsFromFile() {
       34:   65:    if(this->file_name.empty())
       34:   65-block  0
       31:   66:        return;
       31:   66-block  0
        -:   67:
        6:   68:    std::ifstream inputStream(this->file_name);
        3:   68-block  0
    $$$$$:   68-block  1
        6:   69:    std::vector<Dog> file_dog_records;
        3:   69-block  0
    $$$$$:   69-block  1
        6:   70:    Dog current_dog;
        3:   70-block  0
    $$$$$:   70-block  1
       3*:   71:    while (inputStream >> current_dog) {
        3:   71-block  0
        3:   71-block  1
        3:   71-block  2
    %%%%%:   71-block  3
    #####:   72:        file_dog_records.push_back(current_dog);
    %%%%%:   72-block  0
        -:   73:    }
        -:   74:
        3:   75:    this->record = file_dog_records;
        3:   75-block  0
        -:   76:
        3:   77:    inputStream.close();
        3:   77-block  0
        -:   78:
        -:   79:}
        -:   80:
       20:   81:void Repository::writeRecordsToFile() {
       20:   82:    if(this->file_name.empty())
       20:   82-block  0
       19:   83:        return;
       19:   83-block  0
        -:   84:
        2:   85:    std::ofstream outputStream(this->file_name);
        1:   85-block  0
        1:   85-block  1
    $$$$$:   85-block  2
        -:   86:
        2:   87:    for(auto & current_dog : this->record)
        1:   87-block  0
        2:   87-block  1
        1:   87-block  2
        1:   87-block  3
        1:   88:        outputStream<<current_dog<<"\n";
        1:   88-block  0
        -:   89:
        1:   90:    outputStream.close();
        1:   90-block  0
        -:   91:}
        -:   92:
